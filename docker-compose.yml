version: '3.7'

services:
  camunda:
    image: maximmonin/camunda
    container_name: camunda
    restart: always
    depends_on:
      - db
    networks:
      default:
    ports:
      - "2580:8080"
    expose:
      - 8080
      - 9404
    volumes:
      #- ./cfg/web.xml:/camunda/webapps/engine-rest/WEB-INF/web.xml
      - /etc/localtime:/etc/localtime:ro
    environment:
      - DB_DRIVER=org.postgresql.Driver
      - DB_URL=jdbc:postgresql://db:5432/camunda
      - DB_USERNAME=camunda
      - DB_PASSWORD=camunda
      - WAIT_FOR=db:5432
      - WAIT_FOR_TIMEOUT=60
      - TZ=Europe/Kiev
      - JMX_PROMETHEUS=true

  db:
    image: postgres:12.3
    restart: always
    container_name: camunda-db
    command: postgres -c max_connections=100
                      -c shared_buffers=1GB
                      -c effective_cache_size=1536MB
                      -c maintenance_work_mem=256MB
                      -c checkpoint_completion_target=0.7
                      -c wal_buffers=8MB
                      -c max_locks_per_transaction=1000
    networks:
      default:
        aliases:
          - db
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./cfg/setup-replication.sh:/docker-entrypoint-initdb.d/setup-replication.sh
      - ./cfg/init.sql:/docker-entrypoint-initdb.d/init.sql
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_PASSWORD=postgres

  db_replica:
    image: postgres:12.3
    restart: always
    container_name: camunda-db-replica
    depends_on:
      - db
    networks:
      default:
    entrypoint:
      - bash
      - -c
      - |
        echo 'Starting replication'
        pg_basebackup -h db -U camunda -p 5432 -D /var/lib/postgresql/data -Fp -Xs -P -R -w -C -S replica1
        exec docker-entrypoint.sh postgres -c max_connections=100 -c shared_buffers=1GB -c effective_cache_size=1536MB -c maintenance_work_mem=256MB -c max_locks_per_transaction=1000
    volumes:
      - ./dbreplica:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - POSTGRES_PASSWORD=postgres
      - PGPASSWORD=camunda

  pgadmin:
    image: dpage/pgadmin4:4.26
    container_name: camunda-pgadmin
    restart: always
    depends_on:
      - db
    ports:
      - 2581:80
    networks:
      default:
    volumes:
      - ./cfg/servers.json:/pgadmin4/servers.json
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@postgres
      - PGADMIN_DEFAULT_PASSWORD=postgres
      - PGADMIN_SERVER_JSON_FILE=/pgadmin4/servers.json

  prometheus:
    image: prom/prometheus:v2.20.1
    container_name: camunda-prometheus
    restart: always
    expose:
      - 9090
    networks:
      default:
    volumes:
      - ./prometheus:/prometheus
      - ./cfg/prometheus.yml:/etc/prometheus/prometheus.yml
      - /etc/localtime:/etc/localtime:ro

  grafana:
    image: grafana/grafana:7.1.5-ubuntu
    container_name: camunda-grafana
    restart: always
    ports:
      - "2582:3000"
    expose:
      - 3000
    networks:
      default:
    volumes:
      - ./grafana:/var/lib/grafana
      - /etc/localtime:/etc/localtime:ro

  monitor:
    image: kotovdenis/excamad:latest
    container_name: camunda-monitor
    restart: always
    ports:
      - "2584:80"
    expose:
      - 80
    networks:
      default:
    volumes:
      - /etc/localtime:/etc/localtime:ro

##################################################
### Not used right now                         ###

  elasticsearch:
    image: elasticsearch:6.8.12
    restart: always
    container_name: camunda-search
    environment:
      - discovery.type=single-node
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./cfg/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elastic:/usr/share/elasticsearch/data
    expose:
      - 9200
    networks:
      default:

  kibana:
    image: kibana:6.8.12
    restart: always
    container_name: camunda-kibana
    networks:
      default:
    volumes:
      - ./cfg/kibana.yml:/usr/share/kibana/config/kibana.yml
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
     - "2583:5601"


networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
